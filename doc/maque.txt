*maque.txt*       makeprg assembler and tmux dispatcher
*maque* *Maque*
===============================================================================
CONTENTS                                                       *maque-contents*

    1. Intro........................................|maque-intro|
    2. Commands.....................................|maque-command|
    3. tmux.........................................|maque-tmux|
    4. Options......................................|maque-options|
    5. Commands.....................................|maque-commands|
    6. Mappings.....................................|maque-mappings|

===============================================================================
INTRO                                                             *maque-intro*

WARNING: Anything below chapter 3 (tmux) is outdated.

command assembler and tmux coordinator

maque handles two sets of objects: commands and panes.

Commands are context sensitive executables and arguments that ease behaviour
driven development, to be dispatched in targets represented by panes.
Panes are abstractions of shells that can have the following manifestations:

Native:~
Use vim's |:make|

Conque:~
use |conque_term#open| to run the command in a conque buffer

Dispatch:~
use http://github.com/tpope/vim-dispatch to run the command

tmux:~
use |maque|'s builtin tmux handling

===============================================================================
COMMANDS                                                        *maque-command*

A command is a data structure consisting of an executable command line, which
can be dynamicaly evaluated, and a dispatch target with the same property.

The most significant command is the 'auto' command, which is assembled upon
invocation of a maqueprg setter, which defines a command line, mainly
intended to invoke unit tests like rspec examples, nosetest units or an
arbitray command running the associated executable to your current test file.

maque provides configurable methods for defining that command, and
correspondent parameters to parse the output of these for population of the
quickfix list.

The intention of the plugin is to provide seamless interaction with your
unit tests to execute and analyse your developed application.

===============================================================================
TMUX                                                               *maque-tmux*

maque has a sophisticated tmux handling mechanism that goes beyond
dispatching simple commands to a pane. Each defined command can be associated
with a highly parameterisable tmux target and each pane interacts very
flexibly and conveniently with the current situation's parameters.

Pane association:~

The 'main' pane is associated with the 'auto' command, which results in every
unit test assembled through the maque interface being dispatched in a split
pane, with output capturing for further processing by applying 'errorformat'
to the output and opening the quickfix list.

Arbitrary panes can be created, to be associated with multiple commands, to
provide different handling of commands for different purposes.

Pane interaction:~

There are several features for interaction with tmux panes:

Error parsing is done upon invocation of |:MaqueParse|. This reads the output
of the most recent command and populates the quickfix list. Some errorformats
are provided, to be extended.

Killing a pane is a configurable feature that sends signals to the process
running inside of the shell of a designated pane. In the standard
configuration, this sends the signals INT, TERM and KILL in successional
invocation to the command that's been previously executed by |:Maque|.

Arbitrary pane control:~

By using provided API functions, a user can have convenience mechanisms like:

Dispatching a long running process with error capturing like:

Defining a pane and command with these parameters in a project specfic config
like this:
>
  call maque#tmux#add_pane('bg', { '_splitter': 'tmux neww -d' })
  call maque#create_command('thin', 'thin start', { 'pane': 'bg', })
<

and then invoking it using:

>
  :Maque thin
<

which will start your rails webservice in a background tmux window, enabling
you to parse its errors, when occuring, with:

>
  :MaqueParse thin
<

Aux pane:~

maque provides and additional pane by default that opens below your vim
window with a small height, intended to deploy volatile commands with no
error output like "bundle install". It can be used by invoking:

>
  MaqueAux bundle install
<

but like any command and pane, it can be configured to behave according to
your needs.

===============================================================================
OPTIONS                                                         *maque-options*

Overview:~

  |maque_handler|............Command dispatch method.
  |maque_handlers|...........Methods used for cycling.
  |maqueprg|.................Command line to be executed.
  |maque_jump_to_error|......Go to the file/line of the first error.
  |maque_seek_cwd_error|.....Find the first error under cwd.
  |maque_set_ft_options|.....Set defaults for some filetypes

tmux:
  |maque_tmux_mainsplit_cmd|...........Command for creating the main tmux pane.
  |maque_tmux_filter_escape_sequences|.Remove color codes from output.
  |maque_tmux_current_pane|............Name of the current target pane.

conque:
  |maque_leave_conque|.......Go back to the original window.
  |maque_conque_horizontal|..Split direction for the conque term.
  |maque_conque_term_nowrap|.Deactivate line wrapping.

dispatch:
  |maque_dispatch_command|...Command to use for dispatch.vim.

-------------------------------------------------------------------------------
Detailed descriptions and default values:~

                                                           *'g:maque_handler'*
>
  let g:maque_handler = 'tmux'
<

                                                                 *'g:maqueprg'*
When executing |:Maque|, this variable is sent to the handler. The intended
way to customize it is to define a setter function.
>
  let g:maqueprg = 'make'
<

                                                      *'g:maque_jump_to_error'*
>
  let g:maque_jump_to_error = 'first'
<

                                                           *'g:maque_handlers'*
These values are used for |:MaqueCycle|.
>
  let g:maque_handlers = ['tmux', 'dispatch', 'conque', 'native']
<

                                                     *'g:maque_seek_cwd_error'*
>
  let g:maque_seek_cwd_error = 1
<

                                                     *'g:maque_set_ft_options'*
>
  let g:maque_set_ft_options = 0
<

                                                *'g:maque_tmux_main_split_cmd'*
>
  let g:maque_tmux_main_split_cmd = 'tmux split-window -h -d'
<

                                       *'g:maque_tmux_filter_escape_sequences'*
>
  let g:maque_tmux_filter_escape_sequences = 1
<

                                                       *'g:maque_leave_conque'*
>
  let g:maque_leave_conque = 1
<

                                                  *'g:maque_conque_horizontal'*
>
  let g:maque_conque_horizontal = 1
<

                                                 *'g:maque_conque_term_nowrap'*
>
  let g:maque_conque_term_nowrap = 0
<

                                                   *'g:maque_dispatch_command'*
>
  let g:maque_dispatch_command = 'Dispatch'
<

===============================================================================
COMMANDS                                                       *maque-commands*

                                                                      *:Maque*
:Maque [command]
  Run |g:maqueprg| or [command] with the current handler.

===============================================================================
MAPPINGS                                                       *maque-mappings*

                                                             *'<Plug>(maque)'*
<Plug>(maque)
  Calls |:Maque| without arguments, thus executes the most recently set
  |g:maqueprg|.

===============================================================================
CREDITS                                                         *maque-credits*

Developed by Torsten Schmits <github.com/tek>. Distributed under the MIT
license.

Project's homepage:   http://tek.github.io/vim-maque
Git repository:       https://github.com/tek/vim-maque

===============================================================================
CHANGELOG                                                     *maque-changelog*

1.0~

    + Allow tmux panes to be created outside of the current window
    + Enable toggling of tmux pane
    + Pipe output to tempfile, parse errors into qfl
    + Process kill command
    + Allow multiple panes
    + Enable binding a pane to a buffer
    + handle tmux directly

===============================================================================
vim:ft=help:et:ts=2:sw=2:sts=2:norl

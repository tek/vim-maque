{"name":"maque","tagline":"command assembler and tmux coordinator","body":"## Description\r\n\r\n**maque** executes alternative methods to vim's :make command and assists in\r\nassembling command lines.\r\n\r\nA persistent tmux pane,\r\n[Conque](https://github.com/rson/vim-conque 'github repo'),\r\n[dispatch](https://github.com/tpope/vim-dispatch 'github repo') and\r\nusing vim's native `:make`\r\nare currently supported methods.\r\n\r\n## Usage\r\n\r\nEssential mappings:  \r\n`<Plug>Maque` executes `g:maqueprg`  \r\n`<Plug>AutoMaque` calls a `g:maqueprg` setter function and executes it.  \r\n`<Plug>MaqueParse` populates the quickfix list using `'errorformat'`\r\n\r\n## Customization\r\n\r\nTo add your own `make` replacement, assign a function name to\r\n`g:maque_handler`.\r\n\r\nTo replace the default `g:maqueprg` assembly methods, assign yours to\r\n`b:maque_makeprg_setter` or `g:maque_makeprg_setter`, or define the function\r\n`maque#ft#{&filetype}#set_makeprg`. The function's return value is indicative\r\nof whether make should be executed subsequently.  If none of these exist, the\r\nplugin's default setter is used.\r\n\r\n## Details\r\n\r\nThe main purpose of **maque** is to to assemble test invocation commands for\r\nvarious filetypes and manage different test command dispatching methods. The\r\nfirst execution of `AutoMaque` should be done with the cursor on the desired\r\nunittest. After storing information about the currently selected environment,\r\ncustom mappings can launch different commands in conque or tmux (See the puppet\r\nfunctions for an example).\r\n\r\nThe default assembly methods uses `'makeprg'` as executable. If a global or\r\nbuffer-local variable `maque_args_{&makeprg}` is set, it is appended.\r\n\r\nAfter having executed a test, `<Plug>MaqueParse` executes `:cgetfile`, which\r\npopulates the quickfix list identically to how :make does.\r\n\r\n## tmux\r\n\r\nThe tmux method is designed to maintain a persistently open pane for\r\ndispatching. Before and after each test execution, output redirection to a temp\r\nfile is (de)activated.\r\nA mapping `<Plug>MaqueToggleTmux` is provided to manually kill or open the tmux\r\npane.\r\n\r\nA new pane is created as a horizontal split by default, but you can specify an\r\narbitrary system command via `g:maque_tmux_split_cmd`. You can even launch a\r\nnew session in a fresh terminal by setting the variable to `'TMUX= urxvt -e\r\ntmux &!'` (note that tmux will not nest, indicated by the `$TMUX` environment\r\nvariable). As long as as the pane is on localhost, it will be found.\r\n\r\nThere are two commands available to create additional panes:\r\n\r\n`:MaqueTmuxAddPane name ['tmux split command']` creates a named pane which will\r\nreceive all following makes and toggle commands. It will become visible after\r\nexecuting `<Plug>Maque` or `<Plug>MaqueToggleTmux`.\r\nTo activate a different pane, run `:MaqueTmuxCycle` or assign its name to\r\n`g:maque#tmux#current_pane`.\r\n\r\n`:MaqueTmuxBuffer` and `:MaqueTmuxDebuffer` create and destroy a pane that is\r\nassociated with the current buffer and will receive all makes executed from it.\r\n\r\n## Example\r\n\r\nWhen editing an rspec file, the default `maque_args` are set to `--drb`. When\r\ninvoking the `<Plug>AutoMaque` mapping, the default makeprg setter appends\r\n`spec/current_file_spec.rb:23`, given that the cursor is on line 23. The whole\r\ncommand line then becomes `rspec --drb spec/current_file_spec.rb:23`, which\r\nwill run only the example (group) under the cursor.\r\n\r\n## License\r\n\r\nCopyright (c) Torsten Schmits. Distributed under the same terms as Vim itself.\r\nSee `:help license`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"maque","tagline":"command assembler and tmux coordinator","body":"## Description\r\n\r\n**maque** assists in assembling context-dependent command lines, executing them\r\nin a shell and capturing error output.\r\n\r\nMaque's most significant component is its tmux integration. With default\r\nsettings, there are two standard panes used by the command handler:\r\n\r\n- The **main** pane, a persistant horizontal split, is used to execute commands\r\n  via `:Maque` and the command assembly mechanism.\r\n- The **aux** pane, which is a volatile vertical split used for arbitrary\r\n  commands.\r\n\r\nAssembling commands is done through configurable setter functions. The defaults\r\nprovided mainly use the current file or line to configure the test program\r\nexecutable, which is read from `'makeprg'`.\r\n\r\n## Usage\r\n\r\nThe basic commands for using the default panes are demonstrated in this\r\npresentation:\r\n\r\n![basic_demo][1]\r\n\r\nThe **main** pane command, triggered by invoking `:Maque`, will execute\r\nwhatever the variable `g:maqueprg` contains. This variable is the target of\r\nmaque's command assembly functions, which can be used via `:AutoMaque` to set a\r\ncommand line and execute it in the main pane.\r\n\r\nAfter execution, `:MaqueParse` runs `:cgetfile` , populating the quickfix list\r\nidentically to how `:make` does.\r\n\r\nPredefined mappings to these commands exist:\r\n\r\n- `<Plug>(maque)` executes `g:maqueprg`  \r\n- `<Plug>(auto-maque)` calls a `g:maqueprg` setter function and executes it.  \r\n- `<Plug>(maque-parse)` populates the quickfix list using `'errorformat'`\r\n\r\n## Customization\r\n\r\nTo employ different command execution methods or add your own, assign its name\r\nto `g:maque_handler`. This will use the path prefix `maque#{g:maque_handler}#`\r\nfor all functions.\r\n\r\nMaque provides support for serveral third-party execution methods aside from\r\nits built-in tmux target:\r\n\r\n- [conque](https://github.com/rson/vim-conque 'github repo')\r\n- [dispatch](https://github.com/tpope/vim-dispatch 'github repo')\r\n- vim's native `:make`\r\n\r\nTo replace the default `g:maqueprg` assembly methods, assign yours to\r\n`b:maque_makeprg_setter` or `g:maque_makeprg_setter`, or define the function\r\n`maque#ft#{&filetype}#set_makeprg`. The function's return value is indicative\r\nof whether make should be executed subsequently when used via `:AutoMaque`. If\r\nnone of these exist, the plugin's default setter is used.\r\n\r\nThere are two functions that make convenient and persistent configuration of\r\ncommands and panes possible, to be used in filetype or project config:\r\n\r\n- `maque#add_command('name', 'command', options)` can be used to create a command.\r\n- `maque#tmux#add_pane('name', options)` creates a new pane that can be used\r\n  from commands by specifying its name in the options dictionary.\r\n\r\n## Details\r\n\r\nThe default assembly method uses `'makeprg'` as executable, so `:compiler` can\r\nbe used to configure maque. If a global or buffer-local variable\r\n`maque_args_{&makeprg}` is set, it is always appended to the command line. The\r\nfirst execution of `:AutoMaque` should be done with the cursor on the desired\r\nunittest.\r\n\r\nAfter storing information about the currently selected environment, custom\r\nmappings can launch different commands in conque or tmux (See the\r\npuppet-vagrant functions for an example).\r\n\r\n## tmux\r\n\r\nThe tmux method is designed to maintain a persistently open pane for\r\nmaqueprg execution. Before and after each test execution, output redirection to\r\na temp file is (de)activated.\r\nThe command `:MaqueTmuxToggle` is provided to manually kill or open the tmux\r\npane.\r\n\r\nThe main pane is created as a horizontal split by default, but you can specify\r\nan arbitrary system command via `g:maque_tmux_main_split_cmd`. You can even\r\nlaunch a new session in a fresh terminal by setting the variable to `'TMUX=\r\nurxvt -e tmux &!'` (note that tmux will not nest, indicated by the `$TMUX`\r\nenvironment variable). As long as as the pane is on localhost, it will be\r\nfound.\r\n\r\nThere are two commands available to create additional panes:\r\n\r\n`:MaqueTmuxAddPane name ['tmux split command']` creates a named pane which can\r\nbe used by specifying its name as first argument to `:Maque`.\r\nTo use a different pane as default execution target, run `:MaqueTmuxCycle` or\r\nassign its name to `g:maque_tmux_current_pane`.\r\n\r\n`:MaqueTmuxBuffer` and `:MaqueTmuxDebuffer` create and destroy a pane that is\r\nassociated with the current buffer and will receive all makes executed from it.\r\n\r\n`:MaqueTmuxKill` will successively send the signals in\r\n`g:maque_tmux_kill_signals` to the process running in the current pane on each\r\ninvocation, until the process has terminated. The default is INT, TERM, KILL.\r\n\r\nYou can send a custom signal by specifying it, like `:MaqueTmuxKill HUP`.\r\n\r\n\r\n## CtrlP\r\n\r\nMaque provides two CtrlP-menus, `:CtrlPMaque` for displaying and executing\r\navailable commands, and `:CtrlPMaqueTmux` for displaying created panes and\r\nsetting the active pane.\r\n\r\n## Example\r\n\r\nWhen editing an rspec file, the default `maque_args` are set to `--drb`. When\r\ninvoking the `<Plug>(auto-maque)` mapping, the default makeprg setter appends\r\n`spec/current_file_spec.rb:23`, given that the cursor is on line 23. The whole\r\ncommand line then becomes `rspec --drb spec/current_file_spec.rb:23`, which\r\nwill run only the example (group) under the cursor.\r\n\r\n## License\r\n\r\nCopyright (c) Torsten Schmits. Distributed under the terms of the\r\n[MIT License](http://opensource.org/licenses/MIT 'mit license').\r\n\r\n[1]: http://gentoo64.net/maque_basic.gif\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
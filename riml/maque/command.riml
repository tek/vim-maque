" FIXME pane_name is misleading as in eval mode, it is expected to return a
" Pane object
class Command

  def initialize(command, name, params={})
    if has_key(params, 'pane')
      params['pane_name'] = remove(params, 'pane')
    end
    attrs = {
          \ '_command': a:command,
          \ 'pane_name': 'main',
          \ 'handler': g:maque_handler,
          \ 'cmd_type': 'shell',
          \ 'pane_type': 'name',
          \ 'remember': 0,
          \ 'name': name,
          \ 'compiler': '',
          \ 'shell': '',
          \ 'deps': [],
          \ 'envs': [],
          \ 'current_env': 0,
          \ }
    extend(commandObj, attrs)
    extend(commandObj, params)
  end

  defm command
    return call(get(self, '_command_' . self.cmd_type), [], self)
  end

  defm _command_eval
    return eval(self._command)
  end

  defm _command_shell
    return self._command
  end

  defm cmd_compact
    return self.command()
  end

  defm run_in_shell
    if len(self.shell) > 0
      if has_key(g:maque_commands, self.shell)
        return 1
      else
        maque#util#error('no such shell command: ' . self.shell .
              \ '(' . self.name . ')')
        return 0
      end
    else
      return 0
    end
  end

  defm shell_cmd
    return maque#command(self.shell)
  end

  defm run_deps()
    for n in self.deps
      if has_key(g:maque_commands, n)
        maque#command(n).ensure_running()
      else
        maque#util#error('no such command: ' . n . '(' . self.name .
              \ ' dependency)')
      end
    end
  end

  defm make(replace=true)
    self.make_cmdline(self.command(), replace)
  end

  defm make_cmdline(cmdline, replace=true)
    if self.run_in_shell()
      self.shell_cmd().shell_make(cmdline, replace)
    else
      self.make_directly(cmdline, replace)
    end
    maque#set_last_command(self) if self.remember
  end

  defm shell_make(cmdline, replace=true)
    self.ensure_running()
    pane = self.pane()
    pane.shell = 1
    self.make_cmdline(cmdline, replace)
  end

  defm make_directly(cmdline, replace=true)
    g:maque_making_command = self.name
    maque#util#silent('doautocmd User MaqueCommandMake')
    self.run_deps()
    pane = self.pane()
    pane.compiler = self.compiler
    maque#make_pane(pane, cmdline, self.handler, replace)
    g:maque_making_command = ''
  end

  defm queue
    self.make(false)
  end

  defm pane
    return call(get(self, '_pane_' . self.pane_type), [], self)
  end

  defm _pane_eval
    try
      return eval(self.pane_name)
    catch
      echo v:exception
      return self._pane_name
    end
  end

  defm _pane_name
    return maque#pane(self.pane_name)
  end

  defm ensure_running
    if !self.running()
      :echo 'ensure_running launching command ' . self.name
      self.make()
    end
  end

  " kill the process running in the target pane, and, if this succeeds or there
  " was none running, run the command.
  defm restart
    if self.kill()
      call self.make()
    endif
  end

  defm kill
    return self.pane().kill_wait()
  end

  defm running
    return self.pane().process_alive()
  end

  defm stopped
    return self.run_in_shell() || !self.running()
  end

  defm toggle
    pane = self.pane()
    if !self.run_in_shell() && pane.process_alive()
      pane.toggle()
    else
      self.make()
    end
  end
end

def maque#command#new(*args)
  return new Command(*args)
end

class RemoteVim < Command

  def initialize(name, params)
    super('', name, extend({ 'main': 0 }, params))
  end

  defm command
    arg = 'let g:maque_remote = 1'
    cmd = "#{self.base_command()} --cmd ".'"'."#{arg}".'"'
    return cmd
  end

  def base_command
    return "vim --servername #{self.server_name()}"
  end

  defm cmd_compact
    return "remote vim #{self.server_name()}"
  end

  defm execute(cmdline)
    self.remote('send', ":#{cmdline}<cr>")
  end

  defm eval(expr)
    self.remote('expr', expr)
  end

  defm remote(method, args)
    self.launch_vim()
    esc = escape(args, "'".'"')
    cmd = "#{self.base_command()} --remote-#{method} ".'"'."#{esc}".'"'
    maque#util#system(cmd)
  end

  defm launch_vim
    pane = self.pane()
    if type(pane) == type({}) && !pane.process_alive()
      echo 'maque: launching remote vim.'
      self.make()
      maque#util#wait_until("maque#util#server_alive('#{self.server_name()}')",
            \ 25)
    end
  end

  defm server_name
    unless has_key(self, '_server_name')
      if self.main
        self._server_name = v:servername
      else
        id = maque#tmux#vim_id()
        self._server_name = "maque_#{id}_#{self.name}"
      end
    end
    return self._server_name
  end
end

def maque#command#new_vim(name, args)
  return new RemoteVim(name, args)
end

class MainVim < RemoteVim

  def initialize()
    super('main_vim', { 'pane_name': 'vim', 'main': 1 })
  end

  defm server_name
    return v:servername
  end
end

def maque#command#new_main_vim()
  return new MainVim()
end

class VimCommand < Command

  def initialize(*args)
    super(*args)
  end

  defm make
    :execute self.command()
  end
end

def maque#command#new_vim_command(*args)
  return new VimCommand(*args)
end

class Shell < Command

  def initialize(*args)
    super(*args)
  end
end

def maque#command#new_shell(*args)
  return new Shell(*args)
end

def maque#command#init()
  if maque#util#want('add_default_commands') &&
        \ maque#util#not_want('remote', 'default_commands_added')
    maque#command#start_default_commands()
    " maque#util#silent('doautocmd User MaqueCommandsCreated')
  endif
end

def maque#command#start_default_commands()
  g:maque_main_vim = maque#command#new_main_vim()
  maque#create_command('auto', 'maque#auto_prg()', {
        \ 'cmd_type': 'eval',
        \ 'pane_type': 'eval',
        \ 'pane_name': 'maque#current_pane()',
        \ 'remember': 1,
        \ }
        \ )
  maque#create_command('main', 'g:maque_mainprg', {
        \ 'cmd_type': 'eval',
        \ 'pane_type': 'eval',
        \ 'pane_name': 'maque#current_pane()',
        \ 'remember': 1,
        \ }
        \ )
  g:maque_status = maque#command#new_vim('status', {'pane_name': 'status'})
  commands = maque#commands()
  commands['status'] = g:maque_status
  g:maque_default_commands_added = 1
end

def maque#command#quit()
  :unlet! g:maque_main_vim
  :unlet! g:maque_status
  :unlet! g:maque_auto
  g:maque_commands = {}
end

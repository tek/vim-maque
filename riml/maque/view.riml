class g:View

  def initialize(name, params={})
    self.name = name
    attrs = {
          \ '_original_size': [0, 0],
          \ 'minimized': 0,
          \ 'minimized_size': 2,
          \ 'minimize_on_toggle': get(g:, 'maque_tmux_minimize_on_toggle', 0),
          \ 'focus_on_restore': 0,
          \ 'vertical': 1,
          \ 'size': 0,
          \ 'position': 0.5,
          \ }
    extend(attrs, params)
    attrs.minimized_size = max([attrs.minimized_size, 2])
    extend(viewObj, attrs)
  end
    
  defm toggle
    if self.open()
      if self.minimize_on_toggle
        self.toggle_minimized()
      else
        self.close()
      end
    else
      self.create()
    end
  end

  defm toggle_minimized
    if self.minimized
      self.restore()
    else
      self.minimize()
    end
  end

  " Store the current size and set the minimized_size.
  " Do not use the 'size' parameter for restoring, as the pane could have been
  " altered purposefully.
  defm minimize
    if self.open() && !self.minimized
      self._original_size = self.current_size()
      self.apply_size(self.minimized_size) unless self.in_layout()
      self.minimized = 1
      self.pack_layout()
    end
  end

  defm restore
    if self.open() && self.minimized
      self.resize(self._original_size[0], self._original_size[1]) unless self.in_layout()
      self.minimized = 0
      self.focus() if self.focus_on_restore
      self.pack_layout()
    end
  end

  defm apply_size(size, both=0)
    secondary = both ? self._original_size[!self._vertical()] : 0
    if self._vertical()
      self.resize(secondary, size)
    else
      self.resize(size, secondary)
    end
  end

  defm set_size(size)
    self.size = size
    self.pack_layout()
  end

  defm _vertical
    if self.in_layout()
      return self.layout.layout_vertical()
    else
      return self.vertical
    end
  end

  defm fixed_size
    return self.size != 0 || self.minimized
  end

  " Add 0 to the result to ensure the return value is int
  defm effective_size
    return (self.minimized ? self.minimized_size : self.size) + 0
  end

  defm layout_size
    return self.current_size()[self._vertical()] + 0
  end

  defm layout_position
    return self.current_position()[self._vertical()] + 0
  end

  defm pack_layout
    self.layout.pack() if self.in_layout()
    self.pack()
  end

  defm pack
  end

  defm create_and_wait(timeout=5)
    self.create()
    counter = 0
    while (!self.open()) && (counter < timeout * 10)
      :sleep 100m
      counter += 1
    end
  end
end

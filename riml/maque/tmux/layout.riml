class Layout

  def initialize(name, args)
    self.name = name
    self.panes = []
    self.direction = get(a:args, 'direction', 'vertical')
    self.layout = 0
    self.size = get(a:args, 'size')
  end

  defm add(pane)
    add(self.panes, pane)
    pane.layout = self
  end

  defm create
    if self.in_layout()
      self.layout.create_pane(self)
    else
      maque#tmux#command_output(self.creator())
    end
  end
 
  defm create_pane(pane) abort
    panes_before = maque#tmux#pane#all()
    if self.open()
      self.focus()
      maque#tmux#command_output(self.splitter())
      maque#tmux#pane('vim').focus()
    else
      self.create()
    end
    pane.determine_id(panes_before)
    pane.post_create()
    self.pack()
  end
 
  defm pack
    for pane in self.panes
      pane.set_size()
    end
  end
 
  defm open
    return !empty(self.open_panes())
  end
 
  defm focus
    if self.open()
      pane = self.open_panes()[0]
      pane.focus()
    end
  end

  defm set_size()
  end
 
  defm splitter
    return self.direction == 'vertical' ? 'splitw -v -d' : 'splitw -h -d'
  end
 
  defm creator
    return self.direction == 'vertical' ? 'splitw -h -d' : 'splitw -v -d'
  end

  defm in_layout
    return type(self.layout) != type(0)
  end

  defm determine_id(*args)
  end

  defm post_create
  end
 
  def open_panes
    panes = []
    for pane in self.panes
      add(panes, pane) if pane.open()
    end
    return panes
  end
end

def maque#tmux#layout#new(name, args)
  return new Layout(name, args)
end

riml_include 'view.riml'

class Layout < g:View

  def initialize(name, args)
    super(name, args)
    self.panes = []
    self.direction = get(a:args, 'direction', 'vertical')
    self.layout = 0
    self.size = get(a:args, 'size')
  end

  defm add(pane)
    add(self.panes, pane)
    pane.layout = self
  end

  defm create
    unless self.open()
      if self.in_layout() && len(self.panes) > 0
        self.layout.create_pane(self.panes[0])
      else
        maque#tmux#command_output(self.creator())
      end
    end
  end
 
  defm create_pane(pane) abort
    if self.in_layout()
      self.layout.create_kids()
    end
    panes_before = maque#tmux#pane#all()
    unless pane.open()
      if self.open()
        self.focus()
        maque#tmux#command_output(self.splitter())
        maque#tmux#pane('vim').focus()
      else
        self.create()
      end
      pane.determine_id(panes_before)
      pane.post_create()
      self.pack()
    end
  end
 
  defm pack
    for pane in self.panes
      pane.set_size()
    end
  end

  defm close
    for pane in self.open_panes()
      pane.close()
    end
  end
 
  defm open
    return !empty(self.open_panes())
  end
 
  defm focus
    if self.open()
      pane = self.open_panes()[0]
      pane.focus()
    end
  end

  defm set_size
    if self.open()
      self.ref_pane().set_size()
    end
  end

  defm current_size
    if self.open()
      return self.ref_pane().current_size()
    else
      return [0, 0]
    end
  end

  defm resize(width, height)
    if self.open()
      self.ref_pane().resize(width, height)
    end
  end
 
  defm splitter
    return self.direction == 'vertical' ? 'splitw -v -d' : 'splitw -h -d'
  end
 
  defm creator
    return self.direction == 'vertical' ? 'splitw -h -d' : 'splitw -v -d'
  end

  defm in_layout
    return type(self.layout) != type(0)
  end

  defm determine_id(*args)
  end

  defm post_create
  end

  defm create_kids
    for pane in self.panes
      pane.create_and_wait() unless pane.open()
    end
  end
 
  defm create_and_wait(timeout=5)
    self.create()
    counter = 0
    while (!self.open()) && (counter < timeout * 10)
      :sleep 100m
      counter += 1
    end
  end

  def open_panes
    panes = []
    for pane in self.panes
      add(panes, pane) if pane.open()
    end
    return panes
  end

  defm ref_pane
    return self.panes[0]
  end
end

def maque#tmux#layout#new(name, args={})
  return new Layout(name, args)
end

def maque#interface#command_mapping(mapping, cmd_line, args=0)
  mapping = len(mapping) ? 'maque-' . mapping : 'maque'
  cmd_name = maque#util#command_name(mapping)
  execute 'command! -nargs=' . args . ' ' . cmd_name . ' ' . cmd_line
  if args == 0 || args == '*'
    execute 'noremap <silent> <plug>(' . mapping . ') :' . cmd_name . '<cr>'
  end
end

def maque#interface#unite_command_mapping(mapping, cmd_line)
  mapping = 'unite-' . mapping
  cmd_line = 'Unite -auto-resize ' . cmd_line
  return maque#interface#command_mapping(mapping, cmd_line)
end

def maque#interface#unite_source(name, variants)
  for data in variants
    [mapping, profile] = data
    profile_param = (len(profile) ? '-profile-name=maque_' . profile : '')
    source_name = 'maque_' . name
    cmd_line = profile_param . ' ' . source_name
    maque#interface#unite_command_mapping(mapping, cmd_line)
  end
end

def maque#interface#tmux_command_mapping(mapping, cmd_line='', args='*')
  prefixed_mapping = 'tmux-' . mapping
  if !len(cmd_line)
    cmd_line = 'call maque#tmux#' . substitute(mapping, '-', '_', 'g') .
          \ '(<q-args>)'
  end
  return maque#interface#command_mapping(prefixed_mapping, cmd_line, args)
end

def maque#interface#maque_command_mapping(mapping, cmd_line='', args='0')
  if !len(cmd_line)
    cmd_line = 'call maque#' . substitute(mapping, '-', '_', 'g') .
          \ '(<q-args>)'
  end
  return maque#interface#command_mapping(mapping, cmd_line, args)
end

def maque#interface#maque_make_command_mapping(mapping, args='0')
  cmd_line = 'call maque#make_' . substitute(mapping, '-', '_', 'g') .
        \ '(<q-args>)'
  return maque#interface#maque_command_mapping(mapping, cmd_line, args)
end

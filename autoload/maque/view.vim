"
" This file was automatically generated by riml 0.4.0
" Modify with care!
"
function! s:SID()
  if exists('s:SID_VALUE')
    return s:SID_VALUE
  endif
  let s:SID_VALUE = matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
  return s:SID_VALUE
endfunction

function! g:ViewConstructor(name, ...)
  let __splat_var_cpy = copy(a:000)
  if !empty(__splat_var_cpy)
    let params = remove(__splat_var_cpy, 0)
  else
    let params = {}
  endif
  let viewObj = {}
  let viewObj.name = a:name
  let attrs = {'_original_size': [0, 0], 'minimized': 0, 'minimized_size': 2, 'minimize_on_toggle': get(g:, 'maque_tmux_minimize_on_toggle', 0), 'focus_on_restore': 0, 'vertical': 1}
  call extend(attrs, params)
  let attrs.minimized_size = max([attrs.minimized_size, 2])
  call extend(viewObj, attrs)
  let viewObj.toggle = function('<SNR>' . s:SID() . '_s:View_toggle')
  let viewObj.toggle_minimized = function('<SNR>' . s:SID() . '_s:View_toggle_minimized')
  let viewObj.minimize = function('<SNR>' . s:SID() . '_s:View_minimize')
  let viewObj.restore = function('<SNR>' . s:SID() . '_s:View_restore')
  let viewObj._apply_size = function('<SNR>' . s:SID() . '_s:View__apply_size')
  let viewObj._vertical = function('<SNR>' . s:SID() . '_s:View__vertical')
  return viewObj
endfunction

function! <SID>s:View_toggle() dict
  if self.open()
    if self.minimize_on_toggle
      call self.toggle_minimized()
    else
      call self.close()
    endif
  else
    call self.create()
  endif
endfunction

function! <SID>s:View_toggle_minimized() dict
  if self.minimized
    call self.restore()
  else
    call self.minimize()
  endif
endfunction

function! <SID>s:View_minimize() dict
  if self.open() && !self.minimized
    let self._original_size = self.current_size()
    call self._apply_size(self.minimized_size)
    let self.minimized = 1
  endif
endfunction

function! <SID>s:View_restore() dict
  if self.open() && self.minimized
    call self.resize(self._original_size[0], self._original_size[1])
    let self.minimized = 0
    if self.focus_on_restore
      call self.focus()
    endif
  endif
endfunction

function! <SID>s:View__apply_size(size) dict
  if self._vertical()
    call self.resize(self._original_size[0], a:size)
  else
    call self.resize(a:size, self._original_size[1])
  endif
endfunction

function! <SID>s:View__vertical() dict
  if self.in_layout()
    return self.layout.direction ==# 'vertical'
  else
    return self.vertical
  endif
endfunction

"
" This file was automatically generated by riml 0.4.0
" Modify with care!
"
function! s:SID()
  if exists('s:SID_VALUE')
    return s:SID_VALUE
  endif
  let s:SID_VALUE = matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
  return s:SID_VALUE
endfunction

" included: 'unite.riml'
function! s:key(action, source)
  return eval('g:maque_unite_' . a:source . '_mapping_' . a:action)
endfunction

function! maque#unite#unmap(actions, source)
  if eval('g:maque_unite_' . a:source . '_mappings')
    for action in a:actions
      execute 'nunmap <buffer> ' . s:key(action, a:source)
    endfor
  endif
endfunction

function! s:map_key(action, source)
  let comm = 'nmap <expr><silent><buffer> ' . s:key(a:action, a:source) . ' unite#do_action("' . a:action . '")'
  execute comm
endfunction

function! maque#unite#map(actions, source)
  if eval('g:maque_unite_' . a:source . '_mappings')
    for action in a:actions
      call s:map_key(action, a:source)
    endfor
  endif
endfunction

function! g:MaqueUniteSourceConstructor(source, description, actions)
  let maqueUniteSourceObj = {}
  let maqueUniteSourceObj.source = a:source
  let maqueUniteSourceObj.description = a:description
  let maqueUniteSourceObj.actions = a:actions
  let maqueUniteSourceObj.name = 'maque_' . a:source
  let maqueUniteSourceObj.default_kind = maqueUniteSourceObj.name
  let maqueUniteSourceObj.hooks = {'on_syntax': 'unite#sources#' . maqueUniteSourceObj.name . '#init', 'on_close': 'unite#sources#' . maqueUniteSourceObj.name . '#close'}
  let maqueUniteSourceObj.init = function('<SNR>' . s:SID() . '_MaqueUniteSource_init')
  let maqueUniteSourceObj.close = function('<SNR>' . s:SID() . '_MaqueUniteSource_close')
  return maqueUniteSourceObj
endfunction

function! s:MaqueUniteSource_init() dict
  call maque#unite#map(self.actions, self.source)
endfunction

function! s:MaqueUniteSource_close() dict
  call maque#unite#unmap(self.actions, self.source)
endfunction

function! unite#sources#maque_command#define()
  return g:unite_source_maque_command
endfunction

let s:actions = ['make', 'set_main']
function! s:CommandSourceConstructor()
  let commandSourceObj = {}
  let maqueUniteSourceObj = g:MaqueUniteSourceConstructor('command', 'maque commands', s:actions)
  call extend(commandSourceObj, maqueUniteSourceObj)
  let commandSourceObj.syntax = 'uniteSource__MaqueCommand'
  let commandSourceObj.gather_candidates = function('<SNR>' . s:SID() . '_CommandSource_gather_candidates')
  let commandSourceObj.format_candidate = function('<SNR>' . s:SID() . '_CommandSource_format_candidate')
  let commandSourceObj.init_syntax = function('<SNR>' . s:SID() . '_CommandSource_init_syntax')
  return commandSourceObj
endfunction

function! s:CommandSource_gather_candidates(args, context) dict
  let longest_name = max(map(keys(g:maque_commands), 'len(v:val)'))
  let longest_command = max(map(values(g:maque_commands), 'len(v:val.cmd_compact())'))
  return map(keys(g:maque_commands), 'self.format_candidate(v:val, longest_name, longest_command)')
endfunction

function! s:CommandSource_format_candidate(name, longest_name, longest_command) dict
  let cmd = maque#command(a:name)
  let pane = cmd.pane()
  let pad_name = repeat(' ', a:longest_name - len(a:name))
  let pad_cmd = repeat(' ', a:longest_command - len(cmd.cmd_compact()))
  let line = '[' . a:name . ']  ' . pad_name . cmd.cmd_compact() . pad_cmd . '  [' . pane.description() . ']'
  return {'word': line, 'action__name': a:name}
endfunction

function! s:CommandSource_init_syntax() dict
  syntax match uniteSource__MaqueCommand_name /\%(^\s*\[\)\@<=[^\]]\+/ 
  \ containedin=uniteSource__MaqueCommand contained
  syntax match uniteSource__MaqueCommand_bracket /[\[\]]/ 
  \ containedin=uniteSource__MaqueCommand contained
  highlight link uniteSource__MaqueCommand_name Type
  highlight link uniteSource__MaqueCommand_bracket Identifier
endfunction

let g:unite_source_maque_command = s:CommandSourceConstructor()
function! unite#sources#maque_command#init(args, context)
  call g:unite_source_maque_command.init()
  call g:unite_source_maque_command.init_syntax()
endfunction

function! unite#sources#maque_command#close(args, context)
  call g:unite_source_maque_command.close()
endfunction
